// Generated by CoffeeScript 1.9.0
(function() {
  var KEYWORDS, STARTWORDS, checkStartWord, checkTagName, errorMsg, fs, getStyles, isStartWithKeyword, isStrartWithSpecial, mediaReg, parseMediaStyle, reg, uglifycss,
    __hasProp = {}.hasOwnProperty;

  fs = require('fs');

  uglifycss = require('uglifycss');

  KEYWORDS = ['.q_header', '.qhf_'];

  STARTWORDS = ['@', 'require', '.', '#'];

  reg = /\}([\s\S]*?)\{/g;

  mediaReg = /@media(.*?)\{(.*?)\}(.*?)\}/g;

  errorMsg = [];

  exports.check = function(filePath) {
    var content, style;
    errorMsg = [];
    content = fs.readFileSync(filePath, 'utf-8').toString();
    content = uglifycss.processString(content);
    style = getStyles(content);
    checkStartWord(style.classNames);
    checkTagName(style.originClass);
    return errorMsg;
  };

  getStyles = function(content) {
    var classNames, firstClass, ret;
    content = parseMediaStyle(content);
    firstClass = content.substr(0, content.indexOf('{')).split(';');
    ret = {
      classNames: {},
      originClass: []
    };
    classNames = content.match(reg);
    if (classNames === null) {
      return ret;
    }
    classNames = firstClass.concat(classNames);
    classNames.forEach(function(item) {
      var arr;
      item = item.replace('{', '').replace('}', '');
      ret.originClass.push(item);
      arr = item.split(',');
      return arr.forEach(function(cns) {
        var arr1;
        arr1 = cns.split(' ');
        return arr1.forEach(function(cn) {
          if (!ret.classNames[cn] && cn.indexOf('.') === 0) {
            return ret.classNames[cn] = 1;
          }
        });
      });
    });
    return ret;
  };

  parseMediaStyle = function(content) {
    var firstLeftBrace, lastRightBrace, media, mediaStyles, _i, _len;
    mediaStyles = content.match(mediaReg);
    if (mediaStyles !== null) {
      for (_i = 0, _len = mediaStyles.length; _i < _len; _i++) {
        media = mediaStyles[_i];
        firstLeftBrace = media.indexOf('{');
        lastRightBrace = media.lastIndexOf('}');
        content = content.replace(media, media.substring(firstLeftBrace + 1, lastRightBrace));
      }
    }
    return content;
  };

  checkStartWord = function(classNames) {
    var item, notLegitimateWord, ret, value;
    ret = true;
    notLegitimateWord = [];
    for (item in classNames) {
      if (!__hasProp.call(classNames, item)) continue;
      value = classNames[item];
      if (isStrartWithSpecial(item) === true) {
        if (isStartWithKeyword(item) === true) {
          ret = false;
          notLegitimateWord.push(item);
        }
      }
    }
    if (ret === false) {
      errorMsg.push((notLegitimateWord.join(',')) + " 是禁用样式");
    }
    return ret;
  };

  isStartWithKeyword = function(str) {
    var ret;
    ret = false;
    KEYWORDS.forEach(function(keyword) {
      if (str.indexOf(keyword) === 0) {
        return ret = true;
      }
    });
    return ret;
  };

  checkTagName = function(originClass) {
    var notLegitimateWord, ret;
    ret = true;
    notLegitimateWord = [];
    originClass.forEach(function(styleLine) {
      var arr;
      arr = styleLine.split(',');
      return arr.forEach(function(style) {
        var k, namespace, selector, _i, _len, _results;
        k = style.split(' ');
        namespace = k[0];
        _results = [];
        for (_i = 0, _len = k.length; _i < _len; _i++) {
          selector = k[_i];
          if (isStrartWithSpecial(selector) !== true) {
            if (isStrartWithSpecial(namespace) !== true) {
              notLegitimateWord.push(selector);
              _results.push(ret = false);
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
    });
    if (ret === false) {
      return errorMsg.push((notLegitimateWord.join(',')) + "没有命名空间");
    }
  };

  isStrartWithSpecial = function(str) {
    var ret, word, _i, _len;
    ret = false;
    for (_i = 0, _len = STARTWORDS.length; _i < _len; _i++) {
      word = STARTWORDS[_i];
      if (str.indexOf(word) === 0) {
        return true;
      }
    }
    return ret;
  };

}).call(this);
