// Generated by CoffeeScript 1.9.0
(function() {
  var KEYWORDS, checkCss, checkSelector, errorMsg, fs, getStyles, getSuffix, isStartWithKeyword, isTagName, legitimateStartWord, mediaReg, parseMediaStyle, path, reg, uglifycss;

  fs = require('fs');

  path = require('path');

  uglifycss = require('uglifycss');

  KEYWORDS = ['.q_header', '.qhf_'];

  reg = /\}([\s\S]*?)\{/g;

  mediaReg = /@media(.*?)\{(.*?)\}(.*?)\}/g;

  legitimateStartWord = ['.', '#', '@', 'require'];

  errorMsg = [];

  exports.check = function(filePath) {
    var fileName, suffix;
    errorMsg = [];
    fileName = path.basename(filePath);
    suffix = getSuffix(fileName);
    switch (suffix) {
      case 'css':
        checkCss(filePath);
    }
    return {
      ret: errorMsg.length === 0,
      errorMsg: errorMsg.join('\n')
    };
  };

  checkCss = function(filePath) {
    var content, styles;
    content = fs.readFileSync(filePath, 'utf-8').toString();
    content = uglifycss.processString(content);
    styles = getStyles(content);
    return checkSelector(styles);
  };

  getStyles = function(content) {
    var classNames, firstClass, ret;
    content = parseMediaStyle(content);
    firstClass = content.substr(0, content.indexOf('{')).split(';');
    ret = [];
    classNames = content.match(reg);
    if (classNames === null) {
      return ret;
    }
    classNames = firstClass.concat(classNames);
    classNames.forEach(function(item) {
      item = item.replace('{', '').replace('}', '');
      return ret.push(item);
    });
    return ret;
  };

  parseMediaStyle = function(content) {
    var firstLeftBrace, lastRightBrace, media, mediaStyles, _i, _len;
    mediaStyles = content.match(mediaReg);
    if (mediaStyles !== null) {
      for (_i = 0, _len = mediaStyles.length; _i < _len; _i++) {
        media = mediaStyles[_i];
        firstLeftBrace = media.indexOf('{');
        lastRightBrace = media.lastIndexOf('}');
        content = content.replace(media, media.substring(firstLeftBrace + 1, lastRightBrace));
      }
    }
    content = content.replace(/@(.*?);/g, '');
    return content;
  };

  checkSelector = function(styles) {
    var illegalSelector, illegalTagName;
    illegalSelector = [];
    illegalTagName = [];
    styles.forEach(function(styleLine) {
      return styleLine.split(',').forEach(function(selectorLine) {
        var namespace, selectors;
        selectors = selectorLine.split(' ');
        namespace = selectors[0];
        return selectors.forEach(function(selector) {
          var isTag, keyWordResult, namespaceIsTagName;
          keyWordResult = isStartWithKeyword(selector);
          isTag = isTagName(selector);
          if (keyWordResult === true) {
            illegalSelector.push(selector);
          }
          if (isTag === true) {
            namespaceIsTagName = isTagName(namespace);
          }
          if (namespaceIsTagName === true) {
            return illegalTagName.push(selector);
          }
        });
      });
    });
    illegalSelector.length > 0 && errorMsg.push((illegalSelector.join(',')) + "是禁用样式");
    return illegalTagName.length > 0 && errorMsg.push((illegalTagName.join(',')) + "没有命名空间");
  };

  isStartWithKeyword = function(selector) {
    var ret;
    ret = false;
    KEYWORDS.forEach(function(keyword) {
      if (selector.indexOf(keyword) === 0) {
        return ret = true;
      }
    });
    return ret;
  };

  isTagName = function(str) {
    var ret;
    ret = true;
    legitimateStartWord.forEach(function(word) {
      if (str.indexOf(word) === 0) {
        return ret = false;
      }
    });
    return ret;
  };

  getSuffix = function(fileName) {
    var arr, len;
    arr = fileName.split('.');
    len = arr.length;
    if (len === 1) {
      return null;
    }
    return arr[len - 1];
  };

}).call(this);
