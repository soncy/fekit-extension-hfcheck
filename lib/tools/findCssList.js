// Generated by CoffeeScript 1.9.0
(function() {
  var findFilePath, fs, importReg, isCssFile, isLessFile, isSassFile, isSomeTypeFile, listCache, path, requireReg;

  fs = require('fs');

  path = require('path');

  requireReg = /require( ?)\((.*)\)/g;

  importReg = /@import(.*?)[\("'](.*)['"|\)]/g;

  listCache = {};

  module.exports = function(list, folder, callback) {
    return list.forEach(function(filePath) {
      filePath = path.join(process.cwd(), folder, filePath);
      if (isCssFile(filePath)) {
        callback(filePath);
        findFilePath(filePath, callback);
      }
      if (isLessFile(filePath) || isSassFile(filePath)) {
        callback(filePath);
      }
      return listCache[filePath] = 1;
    });
  };

  findFilePath = function(filePath, callback) {
    var content, dirname, findChildList;
    dirname = path.dirname(filePath);
    if (fs.existsSync(filePath)) {
      content = fs.readFileSync(filePath, 'utf-8').toString();
      findChildList = function(reg) {
        var list;
        list = content.match(reg);
        if (list !== null) {
          return list.forEach(function(item) {
            var childFilePath, file;
            file = item.replace(reg, '$2').replace(/["']/g, '');
            childFilePath = path.resolve(dirname, file);
            if ((isCssFile(filePath)) && listCache[childFilePath] !== 1) {
              callback(childFilePath);
              listCache[childFilePath] = 1;
              return findFilePath(childFilePath, callback);
            }
          });
        }
      };
      findChildList(requireReg);
      return findChildList(importReg);
    }
  };

  isCssFile = function(filePath) {
    return isSomeTypeFile(filePath, '.css');
  };

  isLessFile = function(filePath) {
    return isSomeTypeFile(filePath, '.less');
  };

  isSassFile = function(filePath) {
    return isSomeTypeFile(filePath, '.scss');
  };

  isSomeTypeFile = function(filePath, suffix) {
    var basename, currentSuffix;
    basename = path.basename(filePath);
    if (basename.indexOf('touch-reset') === 0) {
      return false;
    }
    currentSuffix = path.extname(basename);
    return currentSuffix === suffix;
  };

}).call(this);
