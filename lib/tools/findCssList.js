// Generated by CoffeeScript 1.9.0
(function() {
  var findFilePath, fs, importReg, isCssFile, isLessFile, path, requireReg;

  fs = require('fs');

  path = require('path');

  requireReg = /require(.*?)\((.*)\)/g;

  importReg = /@import(.*?)[\("'](.*)['"\)]/g;

  module.exports = function(list, folder, callback) {
    return list.forEach(function(filePath) {
      filePath = path.join(process.cwd(), folder, filePath);
      if (isCssFile(filePath)) {
        callback(filePath);
        findFilePath(filePath, callback);
      }
      if (isLessFile(filePath)) {
        return callback(filePath);
      }
    });
  };

  findFilePath = function(filePath, callback) {
    var content, dirname, importList, requireList;
    dirname = path.dirname(filePath);
    content = fs.readFileSync(filePath, 'utf-8').toString();
    requireList = content.match(requireReg);
    if (requireList !== null) {
      requireList.forEach(function(item) {
        var childFilePath, file;
        file = item.replace(requireReg, '$2').replace(/["']/g, '');
        childFilePath = path.resolve(dirname, file);
        callback(childFilePath);
        if (isCssFile(childFilePath)) {
          return findFilePath(childFilePath, callback);
        }
      });
    }
    importList = content.match(importReg);
    if (importList !== null) {
      return importList.forEach(function(item) {
        var childFilePath, file;
        file = item.replace(importReg, '$2').replace(/["']/g, '');
        childFilePath = path.resolve(dirname, file);
        callback(childFilePath);
        if (isCssFile(childFilePath)) {
          return findFilePath(childFilePath, callback);
        }
      });
    }
  };

  isCssFile = function(filePath) {
    var basename, suffix;
    basename = path.basename(filePath);
    suffix = path.extname(basename);
    return suffix === '.css';
  };

  isLessFile = function(filePath) {
    var basename, suffix;
    basename = path.basename(filePath);
    suffix = path.extname(basename);
    return suffix === '.less';
  };

}).call(this);
